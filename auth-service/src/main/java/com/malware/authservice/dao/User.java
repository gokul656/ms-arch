package com.malware.authservice.dao;

import com.malware.authservice.dto.UserDto;
import com.malware.authservice.factory.DTOFactory;
import com.malware.authservice.pojo.HashedPassword;
import lombok.*;
import org.springframework.beans.BeanUtils;

import javax.persistence.Entity;
import javax.persistence.PrePersist;
import java.io.Serializable;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.UUID;

@Entity
@Getter
@Setter
@Builder
@AllArgsConstructor
@NoArgsConstructor
public class User extends BaseEntity implements Serializable, DTOFactory<UserDto> {  // User is a composite key, and they must be of Serializable class

    private String uid;

    private String email;

    private String password;

    private String salt;

    @Override
    public UserDto toDTO() {
        UserDto userDto = new UserDto();
        BeanUtils.copyProperties(this, userDto);
        return userDto;
    }

    @PrePersist
    public void sanitize() throws NoSuchAlgorithmException {
        // generating User ID
        this.uid = UUID.randomUUID().toString();

        HashedPassword hashedPassword = encrypt(password);
        this.password = hashedPassword.getPassword();
        this.salt = hashedPassword.getSalt();
    }

    public HashedPassword encrypt(String password) throws NoSuchAlgorithmException {
        SecureRandom random = new SecureRandom();
        byte[] salt = new byte[16];
        random.nextBytes(salt);

        MessageDigest md = MessageDigest.getInstance("SHA-512");
        md.update(salt);

        byte[] passwordDigest = md.digest(password.getBytes(StandardCharsets.UTF_8));
        byte[] saltDigest = md.digest(password.getBytes(StandardCharsets.UTF_8));

        return new HashedPassword(bytesToHex(passwordDigest), bytesToHex(saltDigest));
    }

    private static String bytesToHex(byte[] bytes) {
        StringBuilder hexString = new StringBuilder(2 * bytes.length);
        for (byte b : bytes) {
            String hex = Integer.toHexString(0xff & b);
            if (hex.length() == 1) {
                hexString.append('0');
            }
            hexString.append(hex);
        }
        return hexString.toString();
    }
}
