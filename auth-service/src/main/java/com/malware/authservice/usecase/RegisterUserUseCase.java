package com.malware.authservice.usecase;

import com.malware.authservice.domain.model.User;
import com.malware.authservice.exception.MalformedCommandException;
import com.malware.authservice.exception.UserAlreadyExistsException;
import com.malware.authservice.factory.IEncryptionAlgorithm;
import com.malware.authservice.port.in.EncryptedText;
import com.malware.authservice.port.in.RegisterUserCommand;
import com.malware.authservice.factory.IUserRepository;
import org.springframework.stereotype.Service;

import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.UUID;

@Service
public class RegisterUserUseCase extends UserValidations {

    private final IEncryptionAlgorithm encryptionAlgorithm;

    public RegisterUserUseCase(IUserRepository userRepository, IEncryptionAlgorithm encryptionAlgorithm) {
        super(userRepository);
        this.encryptionAlgorithm = encryptionAlgorithm;
    }

    public EncryptedText encryptPassword(String password) throws NoSuchAlgorithmException {
        SecureRandom random = new SecureRandom();
        byte[] salt = new byte[16];
        random.nextBytes(salt);

        return encryptionAlgorithm.encrypt(password, salt);
    }

    public void validateCommand(RegisterUserCommand command) throws MalformedCommandException {
        if (!command.validate()) throw new MalformedCommandException();
    }

    public User registerUser(RegisterUserCommand command) throws
            UserAlreadyExistsException,
            MalformedCommandException,
            NoSuchAlgorithmException
    {
        validateCommand(command);
        if (checkUserExists(command.getEmail())) throw new UserAlreadyExistsException();

        User user = User.from(command);
        EncryptedText encryptedText = encryptPassword(user.getPassword());
        user.setPassword(encryptedText.getPhrase());
        user.setSalt(encryptedText.getSalt());
        user.setUID(UUID.randomUUID().toString());

        return userRepository.save(user);
    }
}
