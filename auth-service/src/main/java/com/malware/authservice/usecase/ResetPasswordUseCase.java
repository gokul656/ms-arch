package com.malware.authservice.usecase;

import com.malware.authservice.domain.model.User;
import com.malware.authservice.exception.CustomException;
import com.malware.authservice.exception.InvalidPasswordException;
import com.malware.authservice.exception.UserNotFoundException;
import com.malware.authservice.factory.IEncryptionAlgorithm;
import com.malware.authservice.port.in.EncryptedText;
import com.malware.authservice.port.in.ResetPasswordCommand;
import com.malware.authservice.factory.IUserRepository;

import java.nio.charset.StandardCharsets;
import java.security.NoSuchAlgorithmException;

public class ResetPasswordUseCase extends UserValidations {

    private final IEncryptionAlgorithm encryptionAlgorithm;

    protected ResetPasswordUseCase(IUserRepository userRepository, IEncryptionAlgorithm encryptionAlgorithm) {
        super(userRepository);
        this.encryptionAlgorithm = encryptionAlgorithm;
    }

    public boolean validatePassword(String oldPwd, String newPwd, byte[] salt) {
        try {
            String oldPwdDigest = encryptionAlgorithm.encrypt(oldPwd, salt).getPhrase();
            String newPwdDigest = encryptionAlgorithm.encrypt(newPwd, salt).getPhrase();

            return !oldPwdDigest.equals(newPwdDigest);
        } catch (NoSuchAlgorithmException e) {
            return false;
        }
    }

    public void resetPassword(ResetPasswordCommand command) throws CustomException, NoSuchAlgorithmException {
        User user = userRepository.findByUID(command.getUid()).orElseThrow(UserNotFoundException::new);

        byte[] salt = user.getSalt().getBytes(StandardCharsets.UTF_8);
        boolean isValid = validatePassword(command.getOldPassword(), command.getNewPassword(), salt);
        if (!isValid) throw new InvalidPasswordException();

        EncryptedText encrypted = encryptionAlgorithm.encrypt(command.getNewPassword(), salt);
        user.setPassword(encrypted.getPhrase());
        user.setSalt(encrypted.getSalt());

        userRepository.save(user);
    }
}
