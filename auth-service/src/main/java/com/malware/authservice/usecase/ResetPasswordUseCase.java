package com.malware.authservice.usecase;

import com.malware.authservice.domain.model.User;
import com.malware.authservice.exception.CustomException;
import com.malware.authservice.exception.InvalidPasswordException;
import com.malware.authservice.exception.UserNotFoundException;
import com.malware.authservice.factory.IEncryptionAlgorithm;
import com.malware.authservice.port.in.ResetPasswordCommand;
import com.malware.authservice.repo.IUserRepository;

import java.security.NoSuchAlgorithmException;

public class ResetPasswordUseCase extends UserValidations {

    private final IEncryptionAlgorithm encryptionAlgorithm;

    protected ResetPasswordUseCase(IUserRepository userRepository, IEncryptionAlgorithm encryptionAlgorithm) {
        super(userRepository);
        this.encryptionAlgorithm = encryptionAlgorithm;
    }

    public boolean validatePassword(String oldPwd, String newPwd) {
        try {
            String oldPwdDigest = encryptionAlgorithm.encrypt(oldPwd);
            String newPwdDigest = encryptionAlgorithm.encrypt(newPwd);

            return !oldPwdDigest.equals(newPwdDigest);
        } catch (NoSuchAlgorithmException e) {
            return false;
        }
    }

    public void resetPassword(ResetPasswordCommand command) throws CustomException, NoSuchAlgorithmException {
        User user = userRepository.findByUID(command.getUid()).orElseThrow(UserNotFoundException::new);
        if (!validatePassword(command.getOldPassword(), command.getNewPassword())) throw new InvalidPasswordException();

        user.setPassword(encryptionAlgorithm.encrypt(command.getNewPassword()));
        userRepository.save(user);
    }
}
