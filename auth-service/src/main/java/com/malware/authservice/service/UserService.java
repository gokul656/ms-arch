package com.malware.authservice.service;

import com.malware.authservice.data.dao.JpaUser;
import com.malware.authservice.data.dto.ProductDto;
import com.malware.authservice.data.dto.UserDto;
import com.malware.authservice.exception.CustomException;
import com.malware.authservice.external.ProductClient;
import com.malware.authservice.data.repository.user.UserJpaRepository;
import io.github.resilience4j.retry.annotation.Retry;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

@Slf4j
@Service
@RequiredArgsConstructor
public class UserService {

    private final ProductClient productClient;

    private final UserJpaRepository UserJpaRepository;

    public UserDto addUser(JpaUser jpaUser) {
        jpaUser.setUid(UUID.randomUUID().toString());
        return UserJpaRepository.save(jpaUser).toDTO();
    }

    public UserDto getUser(String uid) throws CustomException {
        return UserJpaRepository.findByUid(uid)
                .orElseThrow(() -> new CustomException("User not found!"))
                .toDTO();
    }

    public List<UserDto> getAllUsers(Pageable pageable) {
        return UserJpaRepository.findAll(pageable)
                .stream()
                .map(JpaUser::toDTO)
                .collect(Collectors.toList());
    }

    @Retry(name = "productService", fallbackMethod = "fallback")
    public List<ProductDto> getUserProducts(String uid) {
        return productClient.getProducts(uid).getBody();
    }

    public List<ProductDto> fallback(String _message, Throwable throwable) {
        log.error("[FALLBACK] {}", throwable.getMessage());
        return new ArrayList<>();
    }
}
