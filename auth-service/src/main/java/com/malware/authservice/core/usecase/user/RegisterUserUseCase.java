package com.malware.authservice.core.usecase.user;

import com.malware.authservice.core.port.out.HashedPassword;
import com.malware.authservice.data.domain.user.User;
import com.malware.authservice.exception.MalformedCommandException;
import com.malware.authservice.exception.UserAlreadyExistsException;
import com.malware.authservice.factory.ICommandMapper;
import com.malware.authservice.factory.EncryptionAlgorithm;
import com.malware.authservice.data.domain.user.UserRepository;
import com.malware.authservice.core.port.in.RegisterUserCommand;
import com.malware.authservice.core.usecase.UserValidations;
import org.springframework.stereotype.Service;

import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.UUID;

@Service
public class RegisterUserUseCase extends UserValidations {

    private final ICommandMapper<RegisterUserCommand, User> mapper;
    private final EncryptionAlgorithm encryptionAlgorithm;

    public RegisterUserUseCase(
            UserRepository userRepository,
            ICommandMapper<RegisterUserCommand, User> mapper,
            EncryptionAlgorithm encryptionAlgorithm
    ) {
        super(userRepository);
        this.mapper = mapper;
        this.encryptionAlgorithm = encryptionAlgorithm;
    }

    public HashedPassword encryptPassword(String password) throws NoSuchAlgorithmException {
        SecureRandom random = new SecureRandom();
        byte[] salt = new byte[16];
        random.nextBytes(salt);

        return encryptionAlgorithm.encrypt(password, salt);
    }

    public void validateCommand(RegisterUserCommand command) throws MalformedCommandException {
        if (!command.validate()) throw new MalformedCommandException();
    }

    public User registerUser(RegisterUserCommand command) throws
            UserAlreadyExistsException,
            MalformedCommandException,
            NoSuchAlgorithmException
    {
        validateCommand(command);
        if (checkUserExists(command.getEmail())) throw new UserAlreadyExistsException();

        User user = mapper.mapToModel(command);
        HashedPassword encryptedText = encryptPassword(user.getPassword());
        user.setPassword(encryptedText.getPhrase());
        user.setSalt(encryptedText.getSalt());
        user.setUid(UUID.randomUUID().toString());

        return userRepository.save(user);
    }
}
