package com.malware.authservice.core.usecase.admin;

import com.malware.authservice.core.port.in.LoginAdminCommand;
import com.malware.authservice.data.domain.admin.Admin;
import com.malware.authservice.data.domain.admin.AdminRepository;
import com.malware.authservice.exception.InvalidPasswordException;
import com.malware.authservice.exception.MalformedCommandException;
import com.malware.authservice.exception.UserNotFoundException;
import com.malware.authservice.factory.EncryptionAlgorithm;
import org.springframework.stereotype.Service;

import java.nio.charset.StandardCharsets;
import java.security.NoSuchAlgorithmException;

@Service
public class LoginAdminUseCase {

    private final EncryptionAlgorithm encryptionAlgorithm;
    private final AdminRepository adminRepository;

    public LoginAdminUseCase(EncryptionAlgorithm encryptionAlgorithm, AdminRepository adminRepository) {
        this.encryptionAlgorithm = encryptionAlgorithm;
        this.adminRepository = adminRepository;
    }

    public Admin login(LoginAdminCommand command) throws MalformedCommandException, UserNotFoundException, NoSuchAlgorithmException, InvalidPasswordException {
        if (!command.validate()) throw new MalformedCommandException();
        Admin admin = adminRepository.findByEmail(command.getEmail()).orElseThrow(UserNotFoundException::new);

        byte[] salt = admin.getSalt().getBytes(StandardCharsets.UTF_8);
        String password = encryptionAlgorithm.encrypt(command.getPassword(), salt).getPhrase();

        // FIXME : Decryption produces different digest
        if (!password.equals(admin.getPassword())) return admin;

        throw new InvalidPasswordException();
    }
}
