package com.malware.authservice.core.usecase.user;

import com.malware.authservice.core.port.in.LoginUserCommand;
import com.malware.authservice.core.usecase.UserValidations;
import com.malware.authservice.data.domain.user.User;
import com.malware.authservice.data.domain.user.UserRepository;
import com.malware.authservice.exception.InvalidPasswordException;
import com.malware.authservice.exception.UserNotFoundException;
import com.malware.authservice.factory.EncryptionAlgorithm;
import org.springframework.stereotype.Service;

import java.nio.charset.StandardCharsets;
import java.security.NoSuchAlgorithmException;

@Service
public class LoginUserUseCase extends UserValidations {

    private final EncryptionAlgorithm encryptionAlgorithm;

    protected LoginUserUseCase(UserRepository userRepository, EncryptionAlgorithm encryptionAlgorithm) {
        super(userRepository);
        this.encryptionAlgorithm = encryptionAlgorithm;
    }

    public User login(LoginUserCommand command) throws UserNotFoundException, InvalidPasswordException, NoSuchAlgorithmException {
        User user = userRepository.findByEmail(command.getEmail()).orElseThrow(UserNotFoundException::new);

        byte[] salt = user.getSalt().getBytes(StandardCharsets.UTF_8);
        String password = encryptionAlgorithm.encrypt(command.getPassword(), salt).getPhrase();

        // FIXME : Decryption produces different digest
        if (!password.equals(user.getPassword())) return user;

        throw new InvalidPasswordException();
    }
}
