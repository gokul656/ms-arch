package com.malware.authservice.controller;

import com.malware.authservice.dao.JpaUser;
import com.malware.authservice.exception.CustomException;
import com.malware.authservice.service.UserService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PageableDefault;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.method.annotation.SseEmitter;

import java.io.IOException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

@Slf4j
@RestController
@RequestMapping("users")
@RequiredArgsConstructor
public class UserController {

    private final UserService userService;

    @PostMapping("/auth/signup")
    ResponseEntity<?> addUser(@RequestBody JpaUser jpaUser) {
        return ResponseEntity.ok(userService.addUser(jpaUser));
    }

    @GetMapping("/auth")
    ResponseEntity<?> getAllUsers(@PageableDefault Pageable pageable) {
        return ResponseEntity.ok(userService.getAllUsers(pageable));
    }

    @GetMapping("/auth/{uid}")
    ResponseEntity<?> getUser(@PathVariable String uid) throws CustomException {
        return ResponseEntity.ok(userService.getUser(uid));
    }

    @GetMapping("/product/{uid}")
    ResponseEntity<?> getProducts(@PathVariable String uid) {
        return ResponseEntity.ok(userService.getUserProducts(uid));
    }

    @GetMapping(value = "/sse")
    SseEmitter createConnection() {
        final SseEmitter emitter = new SseEmitter();

        ExecutorService service = Executors.newSingleThreadExecutor();
        Runnable runnable = () -> {
            for (int i = 0; i < 10; i++) {
                try {
                    emitter.send(i);
                    Thread.sleep(1000);
                } catch (IllegalStateException | IOException | InterruptedException e) {
                    log.error("[ERROR] {}", e.getMessage());
                    emitter.completeWithError(e);
                }
            }
            emitter.complete();
        };

        service.execute(runnable);
        return emitter;
    }
}
