package com.malware.authservice;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.malware.authservice.data.dao.JpaUser;
import com.malware.authservice.data.repository.user.UserJpaRepository;
import lombok.extern.slf4j.Slf4j;
import org.junit.ClassRule;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.testcontainers.containers.MySQLContainer;
import org.testcontainers.junit.jupiter.Testcontainers;

import java.util.Optional;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@Slf4j
@Testcontainers
@ActiveProfiles("test")
@AutoConfigureMockMvc
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
@SpringBootTest(properties = {"spring.datasource.url=jdbc:tc:mysql:8:///test", "spring.jpa.generate-ddl=true"})
class AuthServiceApplicationIT {

    @Autowired
    MockMvc mockMvc;

    @Autowired
    UserJpaRepository UserJpaRepository;

    @Autowired
    ObjectMapper objectMapper;

    @ClassRule
    public static MySQLContainer<?> mySQLContainer = new MySQLContainer("mysql:latest")
            .withDatabaseName("integration-tests-db")
            .withUsername("user")
            .withPassword("pass_word");

    @Test
    @Order(1)
    void doSignUp_thenReturnSuccess() throws Exception {
        final String URL = "http://localhost:6001/users/auth/signup/";

        JpaUser jpaUser = JpaUser.builder()
                .email("gokul656@gmail.com")
                .password("something")
                .build();

        mockMvc.perform(
                post(URL)
                        .content(toString(jpaUser))
                        .contentType(MediaType.APPLICATION_JSON)
        ).andExpect(status().isOk());
    }

    @Test
    @Order(2)
    void doGetUserData_thenReturnSuccess() {
        final String URL = "http://localhost:6001/users/auth/";

        Optional<JpaUser> user = UserJpaRepository.findAll().stream().findFirst();
        user.ifPresentOrElse(
                usr -> {
                    try {
                        MvcResult mvcResult = mockMvc
                                .perform(get(URL + usr.getUid()).contentType(MediaType.APPLICATION_JSON))
                                .andExpect(status().isOk())
                                .andReturn();
                        log.info("[response] {}", mvcResult.getResponse().getContentAsString());
                    } catch (Exception e) {
                        throw new RuntimeException(e);
                    }
                },
                () -> log.error("[failed] user not found")
        );
    }

    <T> String toString(T data) {
        try {
            return objectMapper.writeValueAsString(data);
        } catch (JsonProcessingException e) {
            log.error("[error] {}", e.getMessage());
        }
        return null;
    }
}
