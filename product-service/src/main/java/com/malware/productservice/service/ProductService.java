package com.malware.productservice.service;

import com.malware.productservice.dao.Product;
import com.malware.productservice.dto.ProductDTO;
import com.malware.productservice.exception.CustomException;
import com.malware.productservice.pojo.PaginatedResponse;
import com.malware.productservice.repo.ProductRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.cache.annotation.EnableCaching;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
@EnableCaching
@RequiredArgsConstructor
public class ProductService {
    private final ProductRepository productRepository;

    public Product getProduct(String uid) {
        return productRepository.findByUid(uid);
    }

    public Product addProduct(Product Product) {
        return productRepository.save(Product);
    }

    @Cacheable(key = "#uid", value = "products")
    public List<Product> getProductByUid(String uid) {
        return productRepository.findAllByUid(uid);
    }

    public PaginatedResponse<ProductDTO> getAllProducts(Pageable pageable) {
        Page<Product> productList = productRepository.findAll(pageable);
        List<ProductDTO> productDTOList = productList
                .getContent()
                .stream()
                .map(Product::toDTO)
                .collect(Collectors.toList());

        return new PaginatedResponse<>(
                productList.getNumber(),
                productList.getSize(),
                productDTOList,
                productList.getTotalElements()
        );
    }

    public Product updateProduct(Product newProduct) throws CustomException {
        Optional<Product> optionalProduct = productRepository.findById(newProduct.getId());
        if (optionalProduct.isEmpty()) throw new CustomException("product not found");

        Product existingProduct = optionalProduct.get();
        existingProduct.setName(newProduct.getName());
        existingProduct.setPrice(newProduct.getPrice());

        return productRepository.save(existingProduct);
    }
}
