package com.malware.productservice.controller;

import com.malware.productservice.dao.Product;
import com.malware.productservice.exception.CustomException;
import com.malware.productservice.service.ProductService;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PageableDefault;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.websocket.server.PathParam;

@RestController
@RequestMapping("products")
@RequiredArgsConstructor
public class ProductController {

    private final ProductService productService;

    @PostMapping("add")
    ResponseEntity<?> addProduct(@RequestBody Product product) {
        return ResponseEntity.ok(productService.addProduct(product));
    }

    @PutMapping("update")
    ResponseEntity<?> updateProduct(@RequestBody Product product) throws CustomException {
        return ResponseEntity.ok(productService.updateProduct(product));
    }

    @GetMapping("{uid}")
    ResponseEntity<?> getProducts(@PathVariable String uid) {
        return ResponseEntity.ok(productService.getProductByUid(uid));
    }

    @GetMapping
    ResponseEntity<?> getAllProducts(
            @PageableDefault(size = 20) Pageable pageable,
            @PathParam("page") Integer page,
            @PathParam("size") Integer size
    ) {
        if (page == null || size == null) return ResponseEntity.ok(productService.getAllProducts(pageable));

        if (page <= 1) page = 0;
        else page = page - 1;

        if (size <= 0) size = 1; // size must not be less than one

        pageable = PageRequest.of(page, size);
        return ResponseEntity.ok(productService.getAllProducts(pageable));
    }
}
